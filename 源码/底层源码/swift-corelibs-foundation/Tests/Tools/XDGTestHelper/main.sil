sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

class LGPerson : Decodable & Encodable {
  @_hasStorage @_hasInitialValue var name: String? { get set }
  @_hasStorage @_hasInitialValue var age: Int? { get set }
  @objc deinit
  init()
  enum CodingKeys : CodingKey {
    case name
    case age
    @_implements(Equatable, ==(_:_:)) static func __derived_enum_equals(_ a: LGPerson.CodingKeys, _ b: LGPerson.CodingKeys) -> Bool
    var hashValue: Int { get }
    func hash(into hasher: inout Hasher)
    var stringValue: String { get }
    init?(stringValue: String)
    var intValue: Int? { get }
    init?(intValue: Int)
  }
  required init(from decoder: Decoder) throws
  func encode(to encoder: Encoder) throws
}

@_inheritsConvenienceInitializers class LGTeacher : LGPerson {
  @_hasStorage @_hasInitialValue var subjectName: String? { get set }
  @objc deinit
  override init()
  required init(from decoder: Decoder) throws
}

@_inheritsConvenienceInitializers class LGPartTimeTeacher : LGPerson {
  @_hasStorage @_hasInitialValue var partTime: Double? { get set }
  @objc deinit
  override init()
  required init(from decoder: Decoder) throws
}

@_hasStorage @_hasInitialValue let t: LGTeacher { get }

@_hasStorage @_hasInitialValue let encoder: JSONEncoder { get }

@_hasStorage @_hasInitialValue let encoderData: Data { get }

// t
sil_global hidden [let] @$s4main1tAA9LGTeacherCvp : $LGTeacher

// encoder
sil_global hidden [let] @$s4main7encoder10Foundation11JSONEncoderCvp : $JSONEncoder

// encoderData
sil_global hidden [let] @$s4main11encoderData10Foundation0C0Vvp : $Data

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s4main1tAA9LGTeacherCvp          // id: %2
  %3 = global_addr @$s4main1tAA9LGTeacherCvp : $*LGTeacher // users: %49, %30, %17, %8, %7
  %4 = metatype $@thick LGTeacher.Type            // user: %6
  // function_ref LGTeacher.__allocating_init()
  %5 = function_ref @$s4main9LGTeacherCACycfC : $@convention(method) (@thick LGTeacher.Type) -> @owned LGTeacher // user: %6
  %6 = apply %5(%4) : $@convention(method) (@thick LGTeacher.Type) -> @owned LGTeacher // user: %7
  store %6 to %3 : $*LGTeacher                    // id: %7
  %8 = load %3 : $*LGTeacher                      // users: %10, %9
  strong_retain %8 : $LGTeacher                   // id: %9
  %10 = upcast %8 : $LGTeacher to $LGPerson       // users: %16, %15, %14
  %11 = integer_literal $Builtin.Int64, 10        // user: %12
  %12 = struct $Int (%11 : $Builtin.Int64)        // user: %13
  %13 = enum $Optional<Int>, #Optional.some!enumelt.1, %12 : $Int // user: %15
  %14 = class_method %10 : $LGPerson, #LGPerson.age!setter.1 : (LGPerson) -> (Int?) -> (), $@convention(method) (Optional<Int>, @guaranteed LGPerson) -> () // user: %15
  %15 = apply %14(%13, %10) : $@convention(method) (Optional<Int>, @guaranteed LGPerson) -> ()
  strong_release %10 : $LGPerson                  // id: %16
  %17 = load %3 : $*LGTeacher                     // users: %19, %18
  strong_retain %17 : $LGTeacher                  // id: %18
  %19 = upcast %17 : $LGTeacher to $LGPerson      // users: %29, %28, %27
  %20 = string_literal utf8 "Kody"                // user: %25
  %21 = integer_literal $Builtin.Word, 4          // user: %25
  %22 = integer_literal $Builtin.Int1, -1         // user: %25
  %23 = metatype $@thin String.Type               // user: %25
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %24 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %25
  %25 = apply %24(%20, %21, %22, %23) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %26
  %26 = enum $Optional<String>, #Optional.some!enumelt.1, %25 : $String // user: %28
  %27 = class_method %19 : $LGPerson, #LGPerson.name!setter.1 : (LGPerson) -> (String?) -> (), $@convention(method) (@owned Optional<String>, @guaranteed LGPerson) -> () // user: %28
  %28 = apply %27(%26, %19) : $@convention(method) (@owned Optional<String>, @guaranteed LGPerson) -> ()
  strong_release %19 : $LGPerson                  // id: %29
  %30 = load %3 : $*LGTeacher                     // users: %38, %39
  %31 = string_literal utf8 "Swift"               // user: %36
  %32 = integer_literal $Builtin.Word, 5          // user: %36
  %33 = integer_literal $Builtin.Int1, -1         // user: %36
  %34 = metatype $@thin String.Type               // user: %36
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %35 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %36
  %36 = apply %35(%31, %32, %33, %34) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %37
  %37 = enum $Optional<String>, #Optional.some!enumelt.1, %36 : $String // user: %39
  %38 = class_method %30 : $LGTeacher, #LGTeacher.subjectName!setter.1 : (LGTeacher) -> (String?) -> (), $@convention(method) (@owned Optional<String>, @guaranteed LGTeacher) -> () // user: %39
  %39 = apply %38(%37, %30) : $@convention(method) (@owned Optional<String>, @guaranteed LGTeacher) -> ()
  alloc_global @$s4main7encoder10Foundation11JSONEncoderCvp // id: %40
  %41 = global_addr @$s4main7encoder10Foundation11JSONEncoderCvp : $*JSONEncoder // users: %48, %45
  %42 = metatype $@thick JSONEncoder.Type         // user: %44
  // function_ref JSONEncoder.__allocating_init()
  %43 = function_ref @$s10Foundation11JSONEncoderCACycfC : $@convention(method) (@thick JSONEncoder.Type) -> @owned JSONEncoder // user: %44
  %44 = apply %43(%42) : $@convention(method) (@thick JSONEncoder.Type) -> @owned JSONEncoder // user: %45
  store %44 to %41 : $*JSONEncoder                // id: %45
  alloc_global @$s4main11encoderData10Foundation0C0Vvp // id: %46
  %47 = global_addr @$s4main11encoderData10Foundation0C0Vvp : $*Data // user: %56
  %48 = load %41 : $*JSONEncoder                  // users: %52, %53
  %49 = load %3 : $*LGTeacher                     // user: %51
  %50 = alloc_stack $LGTeacher                    // users: %51, %55, %53, %61
  store %49 to %50 : $*LGTeacher                  // id: %51
  %52 = class_method %48 : $JSONEncoder, #JSONEncoder.encode!1 : <T where T : Encodable> (JSONEncoder) -> (T) throws -> Data, $@convention(method) <τ_0_0 where τ_0_0 : Encodable> (@in_guaranteed τ_0_0, @guaranteed JSONEncoder) -> (@owned Data, @error Error) // user: %53
  try_apply %52<LGTeacher>(%50, %48) : $@convention(method) <τ_0_0 where τ_0_0 : Encodable> (@in_guaranteed τ_0_0, @guaranteed JSONEncoder) -> (@owned Data, @error Error), normal bb1, error bb2 // id: %53

// %54                                            // user: %56
bb1(%54 : $Data):                                 // Preds: bb0
  dealloc_stack %50 : $*LGTeacher                 // id: %55
  store %54 to %47 : $*Data                       // id: %56
  %57 = integer_literal $Builtin.Int32, 0         // user: %58
  %58 = struct $Int32 (%57 : $Builtin.Int32)      // user: %59
  return %58 : $Int32                             // id: %59

// %60                                            // user: %62
bb2(%60 : $Error):                                // Preds: bb0
  dealloc_stack %50 : $*LGTeacher                 // id: %61
  %62 = builtin "errorInMain"(%60 : $Error) : $()
  unreachable                                     // id: %63
} // end sil function 'main'

// variable initialization expression of LGPerson.name
sil hidden [transparent] @$s4main8LGPersonC4nameSSSgvpfi : $@convention(thin) () -> @owned Optional<String> {
bb0:
  %0 = enum $Optional<String>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<String>                   // id: %1
} // end sil function '$s4main8LGPersonC4nameSSSgvpfi'

// LGPerson.name.getter
sil hidden [transparent] @$s4main8LGPersonC4nameSSSgvg : $@convention(method) (@guaranteed LGPerson) -> @owned Optional<String> {
// %0                                             // users: %2, %1
bb0(%0 : $LGPerson):
  debug_value %0 : $LGPerson, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGPerson, #LGPerson.name // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<String> // users: %4, %6
  %4 = load %3 : $*Optional<String>               // users: %7, %5
  retain_value %4 : $Optional<String>             // id: %5
  end_access %3 : $*Optional<String>              // id: %6
  return %4 : $Optional<String>                   // id: %7
} // end sil function '$s4main8LGPersonC4nameSSSgvg'

// LGPerson.name.setter
sil hidden [transparent] @$s4main8LGPersonC4nameSSSgvs : $@convention(method) (@owned Optional<String>, @guaranteed LGPerson) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $Optional<String>, %1 : $LGPerson):
  debug_value %0 : $Optional<String>, let, name "value", argno 1 // id: %2
  debug_value %1 : $LGPerson, let, name "self", argno 2 // id: %3
  retain_value %0 : $Optional<String>             // id: %4
  %5 = ref_element_addr %1 : $LGPerson, #LGPerson.name // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<String> // users: %8, %7, %10
  %7 = load %6 : $*Optional<String>               // user: %9
  store %0 to %6 : $*Optional<String>             // id: %8
  release_value %7 : $Optional<String>            // id: %9
  end_access %6 : $*Optional<String>              // id: %10
  release_value %0 : $Optional<String>            // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s4main8LGPersonC4nameSSSgvs'

// LGPerson.name.modify
sil hidden [transparent] @$s4main8LGPersonC4nameSSSgvM : $@yield_once @convention(method) (@guaranteed LGPerson) -> @yields @inout Optional<String> {
// %0                                             // users: %2, %1
bb0(%0 : $LGPerson):
  debug_value %0 : $LGPerson, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGPerson, #LGPerson.name // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Optional<String> // users: %5, %8, %4
  yield %3 : $*Optional<String>, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Optional<String>              // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Optional<String>              // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main8LGPersonC4nameSSSgvM'

// variable initialization expression of LGPerson.age
sil hidden [transparent] @$s4main8LGPersonC3ageSiSgvpfi : $@convention(thin) () -> Optional<Int> {
bb0:
  %0 = enum $Optional<Int>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<Int>                      // id: %1
} // end sil function '$s4main8LGPersonC3ageSiSgvpfi'

// LGPerson.age.getter
sil hidden [transparent] @$s4main8LGPersonC3ageSiSgvg : $@convention(method) (@guaranteed LGPerson) -> Optional<Int> {
// %0                                             // users: %2, %1
bb0(%0 : $LGPerson):
  debug_value %0 : $LGPerson, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGPerson, #LGPerson.age // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<Int> // users: %4, %5
  %4 = load %3 : $*Optional<Int>                  // user: %6
  end_access %3 : $*Optional<Int>                 // id: %5
  return %4 : $Optional<Int>                      // id: %6
} // end sil function '$s4main8LGPersonC3ageSiSgvg'

// LGPerson.age.setter
sil hidden [transparent] @$s4main8LGPersonC3ageSiSgvs : $@convention(method) (Optional<Int>, @guaranteed LGPerson) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Optional<Int>, %1 : $LGPerson):
  debug_value %0 : $Optional<Int>, let, name "value", argno 1 // id: %2
  debug_value %1 : $LGPerson, let, name "self", argno 2 // id: %3
  %4 = ref_element_addr %1 : $LGPerson, #LGPerson.age // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Optional<Int> // users: %6, %7
  store %0 to %5 : $*Optional<Int>                // id: %6
  end_access %5 : $*Optional<Int>                 // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s4main8LGPersonC3ageSiSgvs'

// LGPerson.age.modify
sil hidden [transparent] @$s4main8LGPersonC3ageSiSgvM : $@yield_once @convention(method) (@guaranteed LGPerson) -> @yields @inout Optional<Int> {
// %0                                             // users: %2, %1
bb0(%0 : $LGPerson):
  debug_value %0 : $LGPerson, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGPerson, #LGPerson.age // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Optional<Int> // users: %5, %8, %4
  yield %3 : $*Optional<Int>, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Optional<Int>                 // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Optional<Int>                 // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main8LGPersonC3ageSiSgvM'

// LGPerson.deinit
sil hidden @$s4main8LGPersonCfd : $@convention(method) (@guaranteed LGPerson) -> @owned Builtin.NativeObject {
// %0                                             // users: %4, %2, %1
bb0(%0 : $LGPerson):
  debug_value %0 : $LGPerson, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGPerson, #LGPerson.name // user: %3
  destroy_addr %2 : $*Optional<String>            // id: %3
  %4 = unchecked_ref_cast %0 : $LGPerson to $Builtin.NativeObject // user: %5
  return %4 : $Builtin.NativeObject               // id: %5
} // end sil function '$s4main8LGPersonCfd'

// LGPerson.__deallocating_deinit
sil hidden @$s4main8LGPersonCfD : $@convention(method) (@owned LGPerson) -> () {
// %0                                             // users: %3, %1
bb0(%0 : $LGPerson):
  debug_value %0 : $LGPerson, let, name "self", argno 1 // id: %1
  // function_ref LGPerson.deinit
  %2 = function_ref @$s4main8LGPersonCfd : $@convention(method) (@guaranteed LGPerson) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed LGPerson) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $LGPerson // user: %5
  dealloc_ref %4 : $LGPerson                      // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s4main8LGPersonCfD'

// LGPerson.__allocating_init()
sil hidden [exact_self_class] @$s4main8LGPersonCACycfC : $@convention(method) (@thick LGPerson.Type) -> @owned LGPerson {
bb0(%0 : $@thick LGPerson.Type):
  %1 = alloc_ref $LGPerson                        // user: %3
  // function_ref LGPerson.init()
  %2 = function_ref @$s4main8LGPersonCACycfc : $@convention(method) (@owned LGPerson) -> @owned LGPerson // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned LGPerson) -> @owned LGPerson // user: %4
  return %3 : $LGPerson                           // id: %4
} // end sil function '$s4main8LGPersonCACycfC'

// LGPerson.init()
sil hidden @$s4main8LGPersonCACycfc : $@convention(method) (@owned LGPerson) -> @owned LGPerson {
// %0                                             // users: %12, %8, %3, %1
bb0(%0 : $LGPerson):
  debug_value %0 : $LGPerson, let, name "self", argno 1 // id: %1
  %2 = enum $Optional<String>, #Optional.none!enumelt // user: %5
  %3 = ref_element_addr %0 : $LGPerson, #LGPerson.name // user: %4
  %4 = begin_access [modify] [dynamic] %3 : $*Optional<String> // users: %5, %6
  store %2 to %4 : $*Optional<String>             // id: %5
  end_access %4 : $*Optional<String>              // id: %6
  %7 = enum $Optional<Int>, #Optional.none!enumelt // user: %10
  %8 = ref_element_addr %0 : $LGPerson, #LGPerson.age // user: %9
  %9 = begin_access [modify] [dynamic] %8 : $*Optional<Int> // users: %10, %11
  store %7 to %9 : $*Optional<Int>                // id: %10
  end_access %9 : $*Optional<Int>                 // id: %11
  return %0 : $LGPerson                           // id: %12
} // end sil function '$s4main8LGPersonCACycfc'

// static LGPerson.CodingKeys.__derived_enum_equals(_:_:)
sil private @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO21__derived_enum_equalsySbAF_AFtFZ : $@convention(method) (LGPerson.CodingKeys, LGPerson.CodingKeys, @thin LGPerson.CodingKeys.Type) -> Bool {
// %0                                             // users: %7, %3
// %1                                             // users: %21, %4
// %2                                             // user: %5
bb0(%0 : $LGPerson.CodingKeys, %1 : $LGPerson.CodingKeys, %2 : $@thin LGPerson.CodingKeys.Type):
  debug_value %0 : $LGPerson.CodingKeys, let, name "a", argno 1 // id: %3
  debug_value %1 : $LGPerson.CodingKeys, let, name "b", argno 2 // id: %4
  debug_value %2 : $@thin LGPerson.CodingKeys.Type, let, name "self", argno 3 // id: %5
  %6 = alloc_stack $Int, var, name "index_a"      // users: %34, %16, %10, %41
  switch_enum %0 : $LGPerson.CodingKeys, case #LGPerson.CodingKeys.name!enumelt: bb1, case #LGPerson.CodingKeys.age!enumelt: bb2 // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int64, 0          // user: %9
  %9 = struct $Int (%8 : $Builtin.Int64)          // user: %11
  %10 = begin_access [modify] [static] %6 : $*Int // users: %11, %12
  store %9 to %10 : $*Int                         // id: %11
  end_access %10 : $*Int                          // id: %12
  br bb3                                          // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int64, 1         // user: %15
  %15 = struct $Int (%14 : $Builtin.Int64)        // user: %17
  %16 = begin_access [modify] [static] %6 : $*Int // users: %17, %18
  store %15 to %16 : $*Int                        // id: %17
  end_access %16 : $*Int                          // id: %18
  br bb3                                          // id: %19

bb3:                                              // Preds: bb2 bb1
  %20 = alloc_stack $Int, var, name "index_b"     // users: %35, %30, %24, %40
  switch_enum %1 : $LGPerson.CodingKeys, case #LGPerson.CodingKeys.name!enumelt: bb4, case #LGPerson.CodingKeys.age!enumelt: bb5 // id: %21

bb4:                                              // Preds: bb3
  %22 = integer_literal $Builtin.Int64, 0         // user: %23
  %23 = struct $Int (%22 : $Builtin.Int64)        // user: %25
  %24 = begin_access [modify] [static] %20 : $*Int // users: %25, %26
  store %23 to %24 : $*Int                        // id: %25
  end_access %24 : $*Int                          // id: %26
  br bb6                                          // id: %27

bb5:                                              // Preds: bb3
  %28 = integer_literal $Builtin.Int64, 1         // user: %29
  %29 = struct $Int (%28 : $Builtin.Int64)        // user: %31
  %30 = begin_access [modify] [static] %20 : $*Int // users: %31, %32
  store %29 to %30 : $*Int                        // id: %31
  end_access %30 : $*Int                          // id: %32
  br bb6                                          // id: %33

bb6:                                              // Preds: bb5 bb4
  %34 = load %6 : $*Int                           // user: %36
  %35 = load %20 : $*Int                          // user: %37
  %36 = struct_extract %34 : $Int, #Int._value    // user: %38
  %37 = struct_extract %35 : $Int, #Int._value    // user: %38
  %38 = builtin "cmp_eq_Int64"(%36 : $Builtin.Int64, %37 : $Builtin.Int64) : $Builtin.Int1 // user: %39
  %39 = struct $Bool (%38 : $Builtin.Int1)        // user: %42
  dealloc_stack %20 : $*Int                       // id: %40
  dealloc_stack %6 : $*Int                        // id: %41
  return %39 : $Bool                              // id: %42
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO21__derived_enum_equalsySbAF_AFtFZ'

// LGPerson.CodingKeys.hashValue.getter
sil private @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO9hashValueSivg : $@convention(method) (LGPerson.CodingKeys) -> Int {
// %0                                             // users: %3, %1
bb0(%0 : $LGPerson.CodingKeys):
  debug_value %0 : $LGPerson.CodingKeys, let, name "self", argno 1 // id: %1
  %2 = alloc_stack $LGPerson.CodingKeys           // users: %3, %6, %5
  store %0 to %2 : $*LGPerson.CodingKeys          // id: %3
  // function_ref _hashValue<A>(for:)
  %4 = function_ref @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int // user: %5
  %5 = apply %4<LGPerson.CodingKeys>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int // user: %7
  dealloc_stack %2 : $*LGPerson.CodingKeys        // id: %6
  return %5 : $Int                                // id: %7
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO9hashValueSivg'

// LGPerson.CodingKeys.hash(into:)
sil private @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, LGPerson.CodingKeys) -> () {
// %0                                             // users: %23, %2
// %1                                             // users: %5, %3
bb0(%0 : $*Hasher, %1 : $LGPerson.CodingKeys):
  debug_value_addr %0 : $*Hasher, var, name "hasher", argno 1 // id: %2
  debug_value %1 : $LGPerson.CodingKeys, let, name "self", argno 2 // id: %3
  %4 = alloc_stack $Int, var, name "discriminator" // users: %18, %14, %8, %28
  switch_enum %1 : $LGPerson.CodingKeys, case #LGPerson.CodingKeys.name!enumelt: bb1, case #LGPerson.CodingKeys.age!enumelt: bb2 // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int64, 0          // user: %7
  %7 = struct $Int (%6 : $Builtin.Int64)          // user: %9
  %8 = begin_access [modify] [static] %4 : $*Int  // users: %9, %10
  store %7 to %8 : $*Int                          // id: %9
  end_access %8 : $*Int                           // id: %10
  br bb3                                          // id: %11

bb2:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int64, 1         // user: %13
  %13 = struct $Int (%12 : $Builtin.Int64)        // user: %15
  %14 = begin_access [modify] [static] %4 : $*Int // users: %15, %16
  store %13 to %14 : $*Int                        // id: %15
  end_access %14 : $*Int                          // id: %16
  br bb3                                          // id: %17

bb3:                                              // Preds: bb2 bb1
  %18 = begin_access [read] [static] %4 : $*Int   // users: %19, %20
  %19 = load %18 : $*Int                          // user: %22
  end_access %18 : $*Int                          // id: %20
  %21 = alloc_stack $Int                          // users: %22, %27, %25
  store %19 to %21 : $*Int                        // id: %22
  %23 = begin_access [modify] [static] %0 : $*Hasher // users: %26, %25
  // function_ref Hasher.combine<A>(_:)
  %24 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> () // user: %25
  %25 = apply %24<Int>(%21, %23) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()
  end_access %23 : $*Hasher                       // id: %26
  dealloc_stack %21 : $*Int                       // id: %27
  dealloc_stack %4 : $*Int                        // id: %28
  %29 = tuple ()                                  // user: %30
  return %29 : $()                                // id: %30
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO4hash4intoys6HasherVz_tF'

// LGPerson.CodingKeys.stringValue.getter
sil private @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO11stringValueSSvg : $@convention(method) (LGPerson.CodingKeys) -> @owned String {
// %0                                             // users: %2, %1
bb0(%0 : $LGPerson.CodingKeys):
  debug_value %0 : $LGPerson.CodingKeys, let, name "self", argno 1 // id: %1
  switch_enum %0 : $LGPerson.CodingKeys, case #LGPerson.CodingKeys.name!enumelt: bb1, case #LGPerson.CodingKeys.age!enumelt: bb2 // id: %2

bb1:                                              // Preds: bb0
  %3 = string_literal utf8 "name"                 // user: %8
  %4 = integer_literal $Builtin.Word, 4           // user: %8
  %5 = integer_literal $Builtin.Int1, -1          // user: %8
  %6 = metatype $@thin String.Type                // user: %8
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %7 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %8
  %8 = apply %7(%3, %4, %5, %6) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %9
  br bb3(%8 : $String)                            // id: %9

bb2:                                              // Preds: bb0
  %10 = string_literal utf8 "age"                 // user: %15
  %11 = integer_literal $Builtin.Word, 3          // user: %15
  %12 = integer_literal $Builtin.Int1, -1         // user: %15
  %13 = metatype $@thin String.Type               // user: %15
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %14 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %15
  %15 = apply %14(%10, %11, %12, %13) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %16
  br bb3(%15 : $String)                           // id: %16

// %17                                            // user: %18
bb3(%17 : $String):                               // Preds: bb2 bb1
  return %17 : $String                            // id: %18
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO11stringValueSSvg'

// LGPerson.CodingKeys.init(stringValue:)
sil private @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO11stringValueAFSgSS_tcfC : $@convention(method) (@owned String, @thin LGPerson.CodingKeys.Type) -> Optional<LGPerson.CodingKeys> {
// %0                                             // users: %66, %60, %59, %52, %42, %33, %32, %31, %24, %14, %5, %4, %3
bb0(%0 : $String, %1 : $@thin LGPerson.CodingKeys.Type):
  %2 = alloc_stack $LGPerson.CodingKeys, var, name "self" // users: %64, %55, %27, %67, %61
  debug_value %0 : $String, let, name "stringValue", argno 1 // id: %3
  retain_value %0 : $String                       // id: %4
  debug_value %0 : $String, let, name "$match"    // id: %5
  %6 = string_literal utf8 "name"                 // user: %11
  %7 = integer_literal $Builtin.Word, 4           // user: %11
  %8 = integer_literal $Builtin.Int1, -1          // user: %11
  %9 = metatype $@thin String.Type                // user: %11
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %10 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %11
  %11 = apply %10(%6, %7, %8, %9) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %21, %19, %18, %12
  retain_value %11 : $String                      // id: %12
  %13 = alloc_stack $String                       // users: %15, %14, %20
  store %0 to %13 : $*String                      // id: %14
  %15 = load %13 : $*String                       // user: %18
  %16 = metatype $@thin String.Type               // user: %18
  // function_ref static String.== infix(_:_:)
  %17 = function_ref @$sSS2eeoiySbSS_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %18
  %18 = apply %17(%11, %15, %16) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %22
  release_value %11 : $String                     // id: %19
  dealloc_stack %13 : $*String                    // id: %20
  release_value %11 : $String                     // id: %21
  %22 = struct_extract %18 : $Bool, #Bool._value  // user: %23
  cond_br %22, bb1, bb2                           // id: %23

bb1:                                              // Preds: bb0
  release_value %0 : $String                      // id: %24
  %25 = metatype $@thin LGPerson.CodingKeys.Type
  %26 = enum $LGPerson.CodingKeys, #LGPerson.CodingKeys.name!enumelt // user: %28
  %27 = begin_access [modify] [static] %2 : $*LGPerson.CodingKeys // users: %28, %29
  store %26 to %27 : $*LGPerson.CodingKeys        // id: %28
  end_access %27 : $*LGPerson.CodingKeys          // id: %29
  br bb5                                          // id: %30

bb2:                                              // Preds: bb0
  release_value %0 : $String                      // id: %31
  retain_value %0 : $String                       // id: %32
  debug_value %0 : $String, let, name "$match"    // id: %33
  %34 = string_literal utf8 "age"                 // user: %39
  %35 = integer_literal $Builtin.Word, 3          // user: %39
  %36 = integer_literal $Builtin.Int1, -1         // user: %39
  %37 = metatype $@thin String.Type               // user: %39
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %38 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %39
  %39 = apply %38(%34, %35, %36, %37) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %49, %47, %46, %40
  retain_value %39 : $String                      // id: %40
  %41 = alloc_stack $String                       // users: %43, %42, %48
  store %0 to %41 : $*String                      // id: %42
  %43 = load %41 : $*String                       // user: %46
  %44 = metatype $@thin String.Type               // user: %46
  // function_ref static String.== infix(_:_:)
  %45 = function_ref @$sSS2eeoiySbSS_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %46
  %46 = apply %45(%39, %43, %44) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %50
  release_value %39 : $String                     // id: %47
  dealloc_stack %41 : $*String                    // id: %48
  release_value %39 : $String                     // id: %49
  %50 = struct_extract %46 : $Bool, #Bool._value  // user: %51
  cond_br %50, bb3, bb4                           // id: %51

bb3:                                              // Preds: bb2
  release_value %0 : $String                      // id: %52
  %53 = metatype $@thin LGPerson.CodingKeys.Type
  %54 = enum $LGPerson.CodingKeys, #LGPerson.CodingKeys.age!enumelt // user: %56
  %55 = begin_access [modify] [static] %2 : $*LGPerson.CodingKeys // users: %56, %57
  store %54 to %55 : $*LGPerson.CodingKeys        // id: %56
  end_access %55 : $*LGPerson.CodingKeys          // id: %57
  br bb5                                          // id: %58

bb4:                                              // Preds: bb2
  release_value %0 : $String                      // id: %59
  release_value %0 : $String                      // id: %60
  dealloc_stack %2 : $*LGPerson.CodingKeys        // id: %61
  %62 = enum $Optional<LGPerson.CodingKeys>, #Optional.none!enumelt // user: %63
  br bb6(%62 : $Optional<LGPerson.CodingKeys>)    // id: %63

bb5:                                              // Preds: bb3 bb1
  %64 = load %2 : $*LGPerson.CodingKeys           // user: %65
  %65 = enum $Optional<LGPerson.CodingKeys>, #Optional.some!enumelt.1, %64 : $LGPerson.CodingKeys // user: %68
  release_value %0 : $String                      // id: %66
  dealloc_stack %2 : $*LGPerson.CodingKeys        // id: %67
  br bb6(%65 : $Optional<LGPerson.CodingKeys>)    // id: %68

// %69                                            // user: %70
bb6(%69 : $Optional<LGPerson.CodingKeys>):        // Preds: bb5 bb4
  return %69 : $Optional<LGPerson.CodingKeys>     // id: %70
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO11stringValueAFSgSS_tcfC'

// LGPerson.CodingKeys.intValue.getter
sil private @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO8intValueSiSgvg : $@convention(method) (LGPerson.CodingKeys) -> Optional<Int> {
// %0                                             // user: %1
bb0(%0 : $LGPerson.CodingKeys):
  debug_value %0 : $LGPerson.CodingKeys, let, name "self", argno 1 // id: %1
  %2 = enum $Optional<Int>, #Optional.none!enumelt // user: %3
  return %2 : $Optional<Int>                      // id: %3
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO8intValueSiSgvg'

// LGPerson.CodingKeys.init(intValue:)
sil private @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO8intValueAFSgSi_tcfC : $@convention(method) (Int, @thin LGPerson.CodingKeys.Type) -> Optional<LGPerson.CodingKeys> {
// %0                                             // user: %3
bb0(%0 : $Int, %1 : $@thin LGPerson.CodingKeys.Type):
  %2 = alloc_stack $LGPerson.CodingKeys, let, name "self" // user: %4
  debug_value %0 : $Int, let, name "intValue", argno 1 // id: %3
  dealloc_stack %2 : $*LGPerson.CodingKeys        // id: %4
  %5 = enum $Optional<LGPerson.CodingKeys>, #Optional.none!enumelt // user: %6
  return %5 : $Optional<LGPerson.CodingKeys>      // id: %6
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO8intValueAFSgSi_tcfC'

// protocol witness for static Equatable.== infix(_:_:) in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed LGPerson.CodingKeys, @in_guaranteed LGPerson.CodingKeys, @thick LGPerson.CodingKeys.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*LGPerson.CodingKeys, %1 : $*LGPerson.CodingKeys, %2 : $@thick LGPerson.CodingKeys.Type):
  %3 = load %0 : $*LGPerson.CodingKeys            // user: %7
  %4 = load %1 : $*LGPerson.CodingKeys            // user: %7
  %5 = metatype $@thin LGPerson.CodingKeys.Type   // user: %7
  // function_ref static LGPerson.CodingKeys.__derived_enum_equals(_:_:)
  %6 = function_ref @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO21__derived_enum_equalsySbAF_AFtFZ : $@convention(method) (LGPerson.CodingKeys, LGPerson.CodingKeys, @thin LGPerson.CodingKeys.Type) -> Bool // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (LGPerson.CodingKeys, LGPerson.CodingKeys, @thin LGPerson.CodingKeys.Type) -> Bool // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSQAASQ2eeoiySbx_xtFZTW'

// protocol witness for Hashable.hashValue.getter in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed LGPerson.CodingKeys) -> Int {
// %0                                             // user: %1
bb0(%0 : $*LGPerson.CodingKeys):
  %1 = load %0 : $*LGPerson.CodingKeys            // user: %3
  // function_ref LGPerson.CodingKeys.hashValue.getter
  %2 = function_ref @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO9hashValueSivg : $@convention(method) (LGPerson.CodingKeys) -> Int // user: %3
  %3 = apply %2(%1) : $@convention(method) (LGPerson.CodingKeys) -> Int // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH9hashValueSivgTW'

// protocol witness for Hashable.hash(into:) in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed LGPerson.CodingKeys) -> () {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*Hasher, %1 : $*LGPerson.CodingKeys):
  %2 = load %1 : $*LGPerson.CodingKeys            // user: %4
  // function_ref LGPerson.CodingKeys.hash(into:)
  %3 = function_ref @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, LGPerson.CodingKeys) -> () // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@inout Hasher, LGPerson.CodingKeys) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH4hash4intoys6HasherVz_tFTW'

// protocol witness for Hashable._rawHashValue(seed:) in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] [always_inline] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed LGPerson.CodingKeys) -> Int {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $*LGPerson.CodingKeys):
  // function_ref Hashable._rawHashValue(seed:)
  %2 = function_ref @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int // user: %3
  %3 = apply %2<LGPerson.CodingKeys>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH13_rawHashValue4seedS2i_tFTW'

// Hashable._rawHashValue(seed:)
sil [serialized] [always_inline] @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int

// protocol witness for CodingKey.stringValue.getter in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP11stringValueSSvgTW : $@convention(witness_method: CodingKey) (@in_guaranteed LGPerson.CodingKeys) -> @owned String {
// %0                                             // user: %1
bb0(%0 : $*LGPerson.CodingKeys):
  %1 = load %0 : $*LGPerson.CodingKeys            // user: %3
  // function_ref LGPerson.CodingKeys.stringValue.getter
  %2 = function_ref @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO11stringValueSSvg : $@convention(method) (LGPerson.CodingKeys) -> @owned String // user: %3
  %3 = apply %2(%1) : $@convention(method) (LGPerson.CodingKeys) -> @owned String // user: %4
  return %3 : $String                             // id: %4
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP11stringValueSSvgTW'

// protocol witness for CodingKey.init(stringValue:) in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP11stringValuexSgSS_tcfCTW : $@convention(witness_method: CodingKey) (@owned String, @thick LGPerson.CodingKeys.Type) -> @out Optional<LGPerson.CodingKeys> {
// %0                                             // user: %6
// %1                                             // user: %5
bb0(%0 : $*Optional<LGPerson.CodingKeys>, %1 : $String, %2 : $@thick LGPerson.CodingKeys.Type):
  %3 = metatype $@thin LGPerson.CodingKeys.Type   // user: %5
  // function_ref LGPerson.CodingKeys.init(stringValue:)
  %4 = function_ref @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO11stringValueAFSgSS_tcfC : $@convention(method) (@owned String, @thin LGPerson.CodingKeys.Type) -> Optional<LGPerson.CodingKeys> // user: %5
  %5 = apply %4(%1, %3) : $@convention(method) (@owned String, @thin LGPerson.CodingKeys.Type) -> Optional<LGPerson.CodingKeys> // user: %6
  store %5 to %0 : $*Optional<LGPerson.CodingKeys> // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP11stringValuexSgSS_tcfCTW'

// protocol witness for CodingKey.intValue.getter in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP8intValueSiSgvgTW : $@convention(witness_method: CodingKey) (@in_guaranteed LGPerson.CodingKeys) -> Optional<Int> {
// %0                                             // user: %1
bb0(%0 : $*LGPerson.CodingKeys):
  %1 = load %0 : $*LGPerson.CodingKeys            // user: %3
  // function_ref LGPerson.CodingKeys.intValue.getter
  %2 = function_ref @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO8intValueSiSgvg : $@convention(method) (LGPerson.CodingKeys) -> Optional<Int> // user: %3
  %3 = apply %2(%1) : $@convention(method) (LGPerson.CodingKeys) -> Optional<Int> // user: %4
  return %3 : $Optional<Int>                      // id: %4
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP8intValueSiSgvgTW'

// protocol witness for CodingKey.init(intValue:) in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP8intValuexSgSi_tcfCTW : $@convention(witness_method: CodingKey) (Int, @thick LGPerson.CodingKeys.Type) -> @out Optional<LGPerson.CodingKeys> {
// %0                                             // user: %6
// %1                                             // user: %5
bb0(%0 : $*Optional<LGPerson.CodingKeys>, %1 : $Int, %2 : $@thick LGPerson.CodingKeys.Type):
  %3 = metatype $@thin LGPerson.CodingKeys.Type   // user: %5
  // function_ref LGPerson.CodingKeys.init(intValue:)
  %4 = function_ref @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLO8intValueAFSgSi_tcfC : $@convention(method) (Int, @thin LGPerson.CodingKeys.Type) -> Optional<LGPerson.CodingKeys> // user: %5
  %5 = apply %4(%1, %3) : $@convention(method) (Int, @thin LGPerson.CodingKeys.Type) -> Optional<LGPerson.CodingKeys> // user: %6
  store %5 to %0 : $*Optional<LGPerson.CodingKeys> // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP8intValuexSgSi_tcfCTW'

// protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs28CustomDebugStringConvertibleAAsAGP16debugDescriptionSSvgTW : $@convention(witness_method: CustomDebugStringConvertible) (@in_guaranteed LGPerson.CodingKeys) -> @owned String {
// %0                                             // user: %2
bb0(%0 : $*LGPerson.CodingKeys):
  // function_ref CodingKey.debugDescription.getter
  %1 = function_ref @$ss9CodingKeyPsE16debugDescriptionSSvg : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@in_guaranteed τ_0_0) -> @owned String // user: %2
  %2 = apply %1<LGPerson.CodingKeys>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@in_guaranteed τ_0_0) -> @owned String // user: %3
  return %2 : $String                             // id: %3
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs28CustomDebugStringConvertibleAAsAGP16debugDescriptionSSvgTW'

// CodingKey.debugDescription.getter
sil @$ss9CodingKeyPsE16debugDescriptionSSvg : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@in_guaranteed τ_0_0) -> @owned String

// protocol witness for CustomStringConvertible.description.getter in conformance LGPerson.CodingKeys
sil private [transparent] [thunk] @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs23CustomStringConvertibleAAsAGP11descriptionSSvgTW : $@convention(witness_method: CustomStringConvertible) (@in_guaranteed LGPerson.CodingKeys) -> @owned String {
// %0                                             // user: %2
bb0(%0 : $*LGPerson.CodingKeys):
  // function_ref CodingKey.description.getter
  %1 = function_ref @$ss9CodingKeyPsE11descriptionSSvg : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@in_guaranteed τ_0_0) -> @owned String // user: %2
  %2 = apply %1<LGPerson.CodingKeys>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@in_guaranteed τ_0_0) -> @owned String // user: %3
  return %2 : $String                             // id: %3
} // end sil function '$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs23CustomStringConvertibleAAsAGP11descriptionSSvgTW'

// CodingKey.description.getter
sil @$ss9CodingKeyPsE11descriptionSSvg : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@in_guaranteed τ_0_0) -> @owned String

// LGPerson.__allocating_init(from:)
sil hidden [exact_self_class] @$s4main8LGPersonC4fromACs7Decoder_p_tKcfC : $@convention(method) (@in Decoder, @thick LGPerson.Type) -> (@owned LGPerson, @error Error) {
// %0                                             // user: %4
bb0(%0 : $*Decoder, %1 : $@thick LGPerson.Type):
  %2 = alloc_ref $LGPerson                        // user: %4
  // function_ref LGPerson.init(from:)
  %3 = function_ref @$s4main8LGPersonC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGPerson) -> (@owned LGPerson, @error Error) // user: %4
  try_apply %3(%0, %2) : $@convention(method) (@in Decoder, @owned LGPerson) -> (@owned LGPerson, @error Error), normal bb1, error bb2 // id: %4

// %5                                             // user: %6
bb1(%5 : $LGPerson):                              // Preds: bb0
  return %5 : $LGPerson                           // id: %6

// %7                                             // user: %8
bb2(%7 : $Error):                                 // Preds: bb0
  throw %7 : $Error                               // id: %8
} // end sil function '$s4main8LGPersonC4fromACs7Decoder_p_tKcfC'

// LGPerson.init(from:)
sil hidden @$s4main8LGPersonC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGPerson) -> (@owned LGPerson, @error Error) {
// %0                                             // users: %69, %52, %16, %2
// %1                                             // users: %68, %53, %46, %31, %11, %6, %4
bb0(%0 : $*Decoder, %1 : $LGPerson):
  debug_value_addr %0 : $*Decoder, let, name "decoder", argno 1 // id: %2
  debug_value undef : $Error, var, name "$error", argno 2 // id: %3
  debug_value %1 : $LGPerson, let, name "self", argno 3 // id: %4
  %5 = enum $Optional<String>, #Optional.none!enumelt // user: %8
  %6 = ref_element_addr %1 : $LGPerson, #LGPerson.name // user: %7
  %7 = begin_access [modify] [dynamic] %6 : $*Optional<String> // users: %8, %9
  store %5 to %7 : $*Optional<String>             // id: %8
  end_access %7 : $*Optional<String>              // id: %9
  %10 = enum $Optional<Int>, #Optional.none!enumelt // user: %13
  %11 = ref_element_addr %1 : $LGPerson, #LGPerson.age // user: %12
  %12 = begin_access [modify] [dynamic] %11 : $*Optional<Int> // users: %13, %14
  store %10 to %12 : $*Optional<Int>              // id: %13
  end_access %12 : $*Optional<Int>                // id: %14
  %15 = alloc_stack $KeyedDecodingContainer<LGPerson.CodingKeys>, let, name "container" // users: %51, %50, %43, %65, %64, %28, %60, %59, %20, %55
  %16 = open_existential_addr immutable_access %0 : $*Decoder to $*@opened("C50DCCAC-48D8-11EB-AE20-F45C89A8FB07") Decoder // users: %20, %20, %19
  %17 = metatype $@thin LGPerson.CodingKeys.Type
  %18 = metatype $@thick LGPerson.CodingKeys.Type // user: %20
  %19 = witness_method $@opened("C50DCCAC-48D8-11EB-AE20-F45C89A8FB07") Decoder, #Decoder.container!1 : <Self where Self : Decoder><Key where Key : CodingKey> (Self) -> (Key.Type) throws -> KeyedDecodingContainer<Key>, %16 : $*@opened("C50DCCAC-48D8-11EB-AE20-F45C89A8FB07") Decoder : $@convention(witness_method: Decoder) <τ_0_0 where τ_0_0 : Decoder><τ_1_0 where τ_1_0 : CodingKey> (@thick τ_1_0.Type, @in_guaranteed τ_0_0) -> (@out KeyedDecodingContainer<τ_1_0>, @error Error) // type-defs: %16; user: %20
  try_apply %19<@opened("C50DCCAC-48D8-11EB-AE20-F45C89A8FB07") Decoder, LGPerson.CodingKeys>(%15, %18, %16) : $@convention(witness_method: Decoder) <τ_0_0 where τ_0_0 : Decoder><τ_1_0 where τ_1_0 : CodingKey> (@thick τ_1_0.Type, @in_guaranteed τ_0_0) -> (@out KeyedDecodingContainer<τ_1_0>, @error Error), normal bb1, error bb4 // type-defs: %16; id: %20

bb1(%21 : $()):                                   // Preds: bb0
  %22 = metatype $@thin String.Type               // user: %28
  %23 = metatype $@thin LGPerson.CodingKeys.Type
  %24 = enum $LGPerson.CodingKeys, #LGPerson.CodingKeys.name!enumelt // user: %26
  %25 = alloc_stack $LGPerson.CodingKeys          // users: %26, %30, %28, %58
  store %24 to %25 : $*LGPerson.CodingKeys        // id: %26
  // function_ref KeyedDecodingContainer.decodeIfPresent(_:forKey:)
  %27 = function_ref @$ss22KeyedDecodingContainerV15decodeIfPresent_6forKeySSSgSSm_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@thin String.Type, @in_guaranteed τ_0_0, @in_guaranteed KeyedDecodingContainer<τ_0_0>) -> (@owned Optional<String>, @error Error) // user: %28
  try_apply %27<LGPerson.CodingKeys>(%22, %25, %15) : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@thin String.Type, @in_guaranteed τ_0_0, @in_guaranteed KeyedDecodingContainer<τ_0_0>) -> (@owned Optional<String>, @error Error), normal bb2, error bb5 // id: %28

// %29                                            // user: %34
bb2(%29 : $Optional<String>):                     // Preds: bb1
  dealloc_stack %25 : $*LGPerson.CodingKeys       // id: %30
  %31 = ref_element_addr %1 : $LGPerson, #LGPerson.name // user: %32
  %32 = begin_access [modify] [dynamic] %31 : $*Optional<String> // users: %34, %33, %36
  %33 = load %32 : $*Optional<String>             // user: %35
  store %29 to %32 : $*Optional<String>           // id: %34
  release_value %33 : $Optional<String>           // id: %35
  end_access %32 : $*Optional<String>             // id: %36
  %37 = metatype $@thin Int.Type                  // user: %43
  %38 = metatype $@thin LGPerson.CodingKeys.Type
  %39 = enum $LGPerson.CodingKeys, #LGPerson.CodingKeys.age!enumelt // user: %41
  %40 = alloc_stack $LGPerson.CodingKeys          // users: %41, %45, %43, %63
  store %39 to %40 : $*LGPerson.CodingKeys        // id: %41
  // function_ref KeyedDecodingContainer.decodeIfPresent(_:forKey:)
  %42 = function_ref @$ss22KeyedDecodingContainerV15decodeIfPresent_6forKeySiSgSim_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@thin Int.Type, @in_guaranteed τ_0_0, @in_guaranteed KeyedDecodingContainer<τ_0_0>) -> (Optional<Int>, @error Error) // user: %43
  try_apply %42<LGPerson.CodingKeys>(%37, %40, %15) : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@thin Int.Type, @in_guaranteed τ_0_0, @in_guaranteed KeyedDecodingContainer<τ_0_0>) -> (Optional<Int>, @error Error), normal bb3, error bb6 // id: %43

// %44                                            // user: %48
bb3(%44 : $Optional<Int>):                        // Preds: bb2
  dealloc_stack %40 : $*LGPerson.CodingKeys       // id: %45
  %46 = ref_element_addr %1 : $LGPerson, #LGPerson.age // user: %47
  %47 = begin_access [modify] [dynamic] %46 : $*Optional<Int> // users: %48, %49
  store %44 to %47 : $*Optional<Int>              // id: %48
  end_access %47 : $*Optional<Int>                // id: %49
  destroy_addr %15 : $*KeyedDecodingContainer<LGPerson.CodingKeys> // id: %50
  dealloc_stack %15 : $*KeyedDecodingContainer<LGPerson.CodingKeys> // id: %51
  destroy_addr %0 : $*Decoder                     // id: %52
  return %1 : $LGPerson                           // id: %53

// %54                                            // user: %56
bb4(%54 : $Error):                                // Preds: bb0
  dealloc_stack %15 : $*KeyedDecodingContainer<LGPerson.CodingKeys> // id: %55
  br bb7(%54 : $Error)                            // id: %56

// %57                                            // user: %61
bb5(%57 : $Error):                                // Preds: bb1
  dealloc_stack %25 : $*LGPerson.CodingKeys       // id: %58
  destroy_addr %15 : $*KeyedDecodingContainer<LGPerson.CodingKeys> // id: %59
  dealloc_stack %15 : $*KeyedDecodingContainer<LGPerson.CodingKeys> // id: %60
  br bb7(%57 : $Error)                            // id: %61

// %62                                            // user: %66
bb6(%62 : $Error):                                // Preds: bb2
  dealloc_stack %40 : $*LGPerson.CodingKeys       // id: %63
  destroy_addr %15 : $*KeyedDecodingContainer<LGPerson.CodingKeys> // id: %64
  dealloc_stack %15 : $*KeyedDecodingContainer<LGPerson.CodingKeys> // id: %65
  br bb7(%62 : $Error)                            // id: %66

// %67                                            // user: %70
bb7(%67 : $Error):                                // Preds: bb6 bb5 bb4
  strong_release %1 : $LGPerson                   // id: %68
  destroy_addr %0 : $*Decoder                     // id: %69
  throw %67 : $Error                              // id: %70
} // end sil function '$s4main8LGPersonC4fromACs7Decoder_p_tKcfc'

// KeyedDecodingContainer.decodeIfPresent(_:forKey:)
sil @$ss22KeyedDecodingContainerV15decodeIfPresent_6forKeySSSgSSm_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@thin String.Type, @in_guaranteed τ_0_0, @in_guaranteed KeyedDecodingContainer<τ_0_0>) -> (@owned Optional<String>, @error Error)

// KeyedDecodingContainer.decodeIfPresent(_:forKey:)
sil @$ss22KeyedDecodingContainerV15decodeIfPresent_6forKeySiSgSim_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@thin Int.Type, @in_guaranteed τ_0_0, @in_guaranteed KeyedDecodingContainer<τ_0_0>) -> (Optional<Int>, @error Error)

// LGPerson.encode(to:)
sil hidden @$s4main8LGPersonC6encode2toys7Encoder_p_tKF : $@convention(method) (@in_guaranteed Encoder, @guaranteed LGPerson) -> @error Error {
// %0                                             // users: %6, %2
// %1                                             // users: %25, %24, %12, %11, %3
bb0(%0 : $*Encoder, %1 : $LGPerson):
  debug_value_addr %0 : $*Encoder, let, name "encoder", argno 1 // id: %2
  debug_value %1 : $LGPerson, let, name "self", argno 2 // id: %3
  debug_value undef : $Error, var, name "$error", argno 3 // id: %4
  %5 = alloc_stack $KeyedEncodingContainer<LGPerson.CodingKeys>, var, name "container" // users: %37, %36, %51, %50, %45, %44, %10, %17, %30
  %6 = open_existential_addr immutable_access %0 : $*Encoder to $*@opened("C50E2206-48D8-11EB-AE20-F45C89A8FB07") Encoder // users: %10, %10, %9
  %7 = metatype $@thin LGPerson.CodingKeys.Type
  %8 = metatype $@thick LGPerson.CodingKeys.Type  // user: %10
  %9 = witness_method $@opened("C50E2206-48D8-11EB-AE20-F45C89A8FB07") Encoder, #Encoder.container!1 : <Self where Self : Encoder><Key where Key : CodingKey> (Self) -> (Key.Type) -> KeyedEncodingContainer<Key>, %6 : $*@opened("C50E2206-48D8-11EB-AE20-F45C89A8FB07") Encoder : $@convention(witness_method: Encoder) <τ_0_0 where τ_0_0 : Encoder><τ_1_0 where τ_1_0 : CodingKey> (@thick τ_1_0.Type, @in_guaranteed τ_0_0) -> @out KeyedEncodingContainer<τ_1_0> // type-defs: %6; user: %10
  %10 = apply %9<@opened("C50E2206-48D8-11EB-AE20-F45C89A8FB07") Encoder, LGPerson.CodingKeys>(%5, %8, %6) : $@convention(witness_method: Encoder) <τ_0_0 where τ_0_0 : Encoder><τ_1_0 where τ_1_0 : CodingKey> (@thick τ_1_0.Type, @in_guaranteed τ_0_0) -> @out KeyedEncodingContainer<τ_1_0> // type-defs: %6
  %11 = class_method %1 : $LGPerson, #LGPerson.name!getter.1 : (LGPerson) -> () -> String?, $@convention(method) (@guaranteed LGPerson) -> @owned Optional<String> // user: %12
  %12 = apply %11(%1) : $@convention(method) (@guaranteed LGPerson) -> @owned Optional<String> // users: %43, %23, %19
  %13 = metatype $@thin LGPerson.CodingKeys.Type
  %14 = enum $LGPerson.CodingKeys, #LGPerson.CodingKeys.name!enumelt // user: %16
  %15 = alloc_stack $LGPerson.CodingKeys          // users: %16, %22, %19, %42
  store %14 to %15 : $*LGPerson.CodingKeys        // id: %16
  %17 = begin_access [modify] [static] %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // users: %21, %19, %41
  // function_ref KeyedEncodingContainer.encodeIfPresent(_:forKey:)
  %18 = function_ref @$ss22KeyedEncodingContainerV15encodeIfPresent_6forKeyySSSg_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@guaranteed Optional<String>, @in_guaranteed τ_0_0, @inout KeyedEncodingContainer<τ_0_0>) -> @error Error // user: %19
  try_apply %18<LGPerson.CodingKeys>(%12, %15, %17) : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@guaranteed Optional<String>, @in_guaranteed τ_0_0, @inout KeyedEncodingContainer<τ_0_0>) -> @error Error, normal bb1, error bb3 // id: %19

bb1(%20 : $()):                                   // Preds: bb0
  end_access %17 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %21
  dealloc_stack %15 : $*LGPerson.CodingKeys       // id: %22
  release_value %12 : $Optional<String>           // id: %23
  %24 = class_method %1 : $LGPerson, #LGPerson.age!getter.1 : (LGPerson) -> () -> Int?, $@convention(method) (@guaranteed LGPerson) -> Optional<Int> // user: %25
  %25 = apply %24(%1) : $@convention(method) (@guaranteed LGPerson) -> Optional<Int> // user: %32
  %26 = metatype $@thin LGPerson.CodingKeys.Type
  %27 = enum $LGPerson.CodingKeys, #LGPerson.CodingKeys.age!enumelt // user: %29
  %28 = alloc_stack $LGPerson.CodingKeys          // users: %29, %35, %32, %49
  store %27 to %28 : $*LGPerson.CodingKeys        // id: %29
  %30 = begin_access [modify] [static] %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // users: %34, %32, %48
  // function_ref KeyedEncodingContainer.encodeIfPresent(_:forKey:)
  %31 = function_ref @$ss22KeyedEncodingContainerV15encodeIfPresent_6forKeyySiSg_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (Optional<Int>, @in_guaranteed τ_0_0, @inout KeyedEncodingContainer<τ_0_0>) -> @error Error // user: %32
  try_apply %31<LGPerson.CodingKeys>(%25, %28, %30) : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (Optional<Int>, @in_guaranteed τ_0_0, @inout KeyedEncodingContainer<τ_0_0>) -> @error Error, normal bb2, error bb4 // id: %32

bb2(%33 : $()):                                   // Preds: bb1
  end_access %30 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %34
  dealloc_stack %28 : $*LGPerson.CodingKeys       // id: %35
  destroy_addr %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %36
  dealloc_stack %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %37
  %38 = tuple ()                                  // user: %39
  return %38 : $()                                // id: %39

// %40                                            // user: %46
bb3(%40 : $Error):                                // Preds: bb0
  end_access %17 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %41
  dealloc_stack %15 : $*LGPerson.CodingKeys       // id: %42
  release_value %12 : $Optional<String>           // id: %43
  destroy_addr %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %44
  dealloc_stack %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %45
  br bb5(%40 : $Error)                            // id: %46

// %47                                            // user: %52
bb4(%47 : $Error):                                // Preds: bb1
  end_access %30 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %48
  dealloc_stack %28 : $*LGPerson.CodingKeys       // id: %49
  destroy_addr %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %50
  dealloc_stack %5 : $*KeyedEncodingContainer<LGPerson.CodingKeys> // id: %51
  br bb5(%47 : $Error)                            // id: %52

// %53                                            // user: %54
bb5(%53 : $Error):                                // Preds: bb4 bb3
  throw %53 : $Error                              // id: %54
} // end sil function '$s4main8LGPersonC6encode2toys7Encoder_p_tKF'

// KeyedEncodingContainer.encodeIfPresent(_:forKey:)
sil @$ss22KeyedEncodingContainerV15encodeIfPresent_6forKeyySSSg_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (@guaranteed Optional<String>, @in_guaranteed τ_0_0, @inout KeyedEncodingContainer<τ_0_0>) -> @error Error

// KeyedEncodingContainer.encodeIfPresent(_:forKey:)
sil @$ss22KeyedEncodingContainerV15encodeIfPresent_6forKeyySiSg_xtKF : $@convention(method) <τ_0_0 where τ_0_0 : CodingKey> (Optional<Int>, @in_guaranteed τ_0_0, @inout KeyedEncodingContainer<τ_0_0>) -> @error Error

// protocol witness for Decodable.init(from:) in conformance LGPerson
sil private [transparent] [thunk] @$s4main8LGPersonCSeAASe4fromxs7Decoder_p_tKcfCTW : $@convention(witness_method: Decodable) (@in Decoder, @thick LGPerson.Type) -> (@out LGPerson, @error Error) {
// %0                                             // user: %6
// %1                                             // user: %4
// %2                                             // users: %4, %3
bb0(%0 : $*LGPerson, %1 : $*Decoder, %2 : $@thick LGPerson.Type):
  %3 = class_method %2 : $@thick LGPerson.Type, #LGPerson.init!allocator.1 : (LGPerson.Type) -> (Decoder) throws -> LGPerson, $@convention(method) (@in Decoder, @thick LGPerson.Type) -> (@owned LGPerson, @error Error) // user: %4
  try_apply %3(%1, %2) : $@convention(method) (@in Decoder, @thick LGPerson.Type) -> (@owned LGPerson, @error Error), normal bb1, error bb2 // id: %4

// %5                                             // user: %6
bb1(%5 : $LGPerson):                              // Preds: bb0
  store %5 to %0 : $*LGPerson                     // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8

// %9                                             // user: %10
bb2(%9 : $Error):                                 // Preds: bb0
  throw %9 : $Error                               // id: %10
} // end sil function '$s4main8LGPersonCSeAASe4fromxs7Decoder_p_tKcfCTW'

// protocol witness for Encodable.encode(to:) in conformance LGPerson
sil private [transparent] [thunk] @$s4main8LGPersonCSEAASE6encode2toys7Encoder_p_tKFTW : $@convention(witness_method: Encodable) (@in_guaranteed Encoder, @in_guaranteed LGPerson) -> @error Error {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*Encoder, %1 : $*LGPerson):
  %2 = load %1 : $*LGPerson                       // users: %3, %4
  %3 = class_method %2 : $LGPerson, #LGPerson.encode!1 : (LGPerson) -> (Encoder) throws -> (), $@convention(method) (@in_guaranteed Encoder, @guaranteed LGPerson) -> @error Error // user: %4
  try_apply %3(%0, %2) : $@convention(method) (@in_guaranteed Encoder, @guaranteed LGPerson) -> @error Error, normal bb1, error bb2 // id: %4

bb1(%5 : $()):                                    // Preds: bb0
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

// %8                                             // user: %9
bb2(%8 : $Error):                                 // Preds: bb0
  throw %8 : $Error                               // id: %9
} // end sil function '$s4main8LGPersonCSEAASE6encode2toys7Encoder_p_tKFTW'

// variable initialization expression of LGTeacher.subjectName
sil hidden [transparent] @$s4main9LGTeacherC11subjectNameSSSgvpfi : $@convention(thin) () -> @owned Optional<String> {
bb0:
  %0 = enum $Optional<String>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<String>                   // id: %1
} // end sil function '$s4main9LGTeacherC11subjectNameSSSgvpfi'

// LGTeacher.subjectName.getter
sil hidden [transparent] @$s4main9LGTeacherC11subjectNameSSSgvg : $@convention(method) (@guaranteed LGTeacher) -> @owned Optional<String> {
// %0                                             // users: %2, %1
bb0(%0 : $LGTeacher):
  debug_value %0 : $LGTeacher, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGTeacher, #LGTeacher.subjectName // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<String> // users: %4, %6
  %4 = load %3 : $*Optional<String>               // users: %7, %5
  retain_value %4 : $Optional<String>             // id: %5
  end_access %3 : $*Optional<String>              // id: %6
  return %4 : $Optional<String>                   // id: %7
} // end sil function '$s4main9LGTeacherC11subjectNameSSSgvg'

// LGTeacher.subjectName.setter
sil hidden [transparent] @$s4main9LGTeacherC11subjectNameSSSgvs : $@convention(method) (@owned Optional<String>, @guaranteed LGTeacher) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $Optional<String>, %1 : $LGTeacher):
  debug_value %0 : $Optional<String>, let, name "value", argno 1 // id: %2
  debug_value %1 : $LGTeacher, let, name "self", argno 2 // id: %3
  retain_value %0 : $Optional<String>             // id: %4
  %5 = ref_element_addr %1 : $LGTeacher, #LGTeacher.subjectName // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<String> // users: %8, %7, %10
  %7 = load %6 : $*Optional<String>               // user: %9
  store %0 to %6 : $*Optional<String>             // id: %8
  release_value %7 : $Optional<String>            // id: %9
  end_access %6 : $*Optional<String>              // id: %10
  release_value %0 : $Optional<String>            // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s4main9LGTeacherC11subjectNameSSSgvs'

// LGTeacher.subjectName.modify
sil hidden [transparent] @$s4main9LGTeacherC11subjectNameSSSgvM : $@yield_once @convention(method) (@guaranteed LGTeacher) -> @yields @inout Optional<String> {
// %0                                             // users: %2, %1
bb0(%0 : $LGTeacher):
  debug_value %0 : $LGTeacher, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGTeacher, #LGTeacher.subjectName // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Optional<String> // users: %5, %8, %4
  yield %3 : $*Optional<String>, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Optional<String>              // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Optional<String>              // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main9LGTeacherC11subjectNameSSSgvM'

// LGTeacher.__ivar_destroyer
sil hidden @$s4main9LGTeacherCfE : $@convention(method) (@guaranteed LGTeacher) -> () {
// %0                                             // users: %2, %1
bb0(%0 : $LGTeacher):
  debug_value %0 : $LGTeacher, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGTeacher, #LGTeacher.subjectName // user: %3
  destroy_addr %2 : $*Optional<String>            // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s4main9LGTeacherCfE'

// LGTeacher.deinit
sil hidden @$s4main9LGTeacherCfd : $@convention(method) (@guaranteed LGTeacher) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $LGTeacher):
  debug_value %0 : $LGTeacher, let, name "self", argno 1 // id: %1
  %2 = upcast %0 : $LGTeacher to $LGPerson        // user: %4
  // function_ref LGPerson.deinit
  %3 = function_ref @$s4main8LGPersonCfd : $@convention(method) (@guaranteed LGPerson) -> @owned Builtin.NativeObject // user: %4
  %4 = apply %3(%2) : $@convention(method) (@guaranteed LGPerson) -> @owned Builtin.NativeObject // users: %5, %8
  %5 = unchecked_ref_cast %4 : $Builtin.NativeObject to $LGTeacher // user: %6
  %6 = ref_element_addr %5 : $LGTeacher, #LGTeacher.subjectName // user: %7
  destroy_addr %6 : $*Optional<String>            // id: %7
  return %4 : $Builtin.NativeObject               // id: %8
} // end sil function '$s4main9LGTeacherCfd'

// LGTeacher.__deallocating_deinit
sil hidden @$s4main9LGTeacherCfD : $@convention(method) (@owned LGTeacher) -> () {
// %0                                             // users: %3, %1
bb0(%0 : $LGTeacher):
  debug_value %0 : $LGTeacher, let, name "self", argno 1 // id: %1
  // function_ref LGTeacher.deinit
  %2 = function_ref @$s4main9LGTeacherCfd : $@convention(method) (@guaranteed LGTeacher) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed LGTeacher) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $LGTeacher // user: %5
  dealloc_ref %4 : $LGTeacher                     // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s4main9LGTeacherCfD'

// LGTeacher.__allocating_init()
sil hidden [exact_self_class] @$s4main9LGTeacherCACycfC : $@convention(method) (@thick LGTeacher.Type) -> @owned LGTeacher {
bb0(%0 : $@thick LGTeacher.Type):
  %1 = alloc_ref $LGTeacher                       // user: %3
  // function_ref LGTeacher.init()
  %2 = function_ref @$s4main9LGTeacherCACycfc : $@convention(method) (@owned LGTeacher) -> @owned LGTeacher // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned LGTeacher) -> @owned LGTeacher // user: %4
  return %3 : $LGTeacher                          // id: %4
} // end sil function '$s4main9LGTeacherCACycfC'

// LGTeacher.init()
sil hidden @$s4main9LGTeacherCACycfc : $@convention(method) (@owned LGTeacher) -> @owned LGTeacher {
// %0                                             // users: %9, %5, %3, %2
bb0(%0 : $LGTeacher):
  %1 = alloc_stack $LGTeacher, let, name "self"   // users: %16, %10, %3, %17, %18
  strong_retain %0 : $LGTeacher                   // id: %2
  store %0 to %1 : $*LGTeacher                    // id: %3
  %4 = enum $Optional<String>, #Optional.none!enumelt // user: %7
  %5 = ref_element_addr %0 : $LGTeacher, #LGTeacher.subjectName // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<String> // users: %7, %8
  store %4 to %6 : $*Optional<String>             // id: %7
  end_access %6 : $*Optional<String>              // id: %8
  strong_release %0 : $LGTeacher                  // id: %9
  %10 = load %1 : $*LGTeacher                     // user: %11
  %11 = upcast %10 : $LGTeacher to $LGPerson      // user: %13
  // function_ref LGPerson.init()
  %12 = function_ref @$s4main8LGPersonCACycfc : $@convention(method) (@owned LGPerson) -> @owned LGPerson // user: %13
  %13 = apply %12(%11) : $@convention(method) (@owned LGPerson) -> @owned LGPerson // user: %14
  %14 = unchecked_ref_cast %13 : $LGPerson to $LGTeacher // users: %19, %16, %15
  strong_retain %14 : $LGTeacher                  // id: %15
  store %14 to %1 : $*LGTeacher                   // id: %16
  destroy_addr %1 : $*LGTeacher                   // id: %17
  dealloc_stack %1 : $*LGTeacher                  // id: %18
  return %14 : $LGTeacher                         // id: %19
} // end sil function '$s4main9LGTeacherCACycfc'

// LGTeacher.__allocating_init(from:)
sil hidden [exact_self_class] @$s4main9LGTeacherC4fromACs7Decoder_p_tKcfC : $@convention(method) (@in Decoder, @thick LGTeacher.Type) -> (@owned LGTeacher, @error Error) {
// %0                                             // user: %4
bb0(%0 : $*Decoder, %1 : $@thick LGTeacher.Type):
  %2 = alloc_ref $LGTeacher                       // user: %4
  // function_ref LGTeacher.init(from:)
  %3 = function_ref @$s4main9LGTeacherC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGTeacher) -> (@owned LGTeacher, @error Error) // user: %4
  try_apply %3(%0, %2) : $@convention(method) (@in Decoder, @owned LGTeacher) -> (@owned LGTeacher, @error Error), normal bb1, error bb2 // id: %4

// %5                                             // user: %6
bb1(%5 : $LGTeacher):                             // Preds: bb0
  return %5 : $LGTeacher                          // id: %6

// %7                                             // user: %8
bb2(%7 : $Error):                                 // Preds: bb0
  throw %7 : $Error                               // id: %8
} // end sil function '$s4main9LGTeacherC4fromACs7Decoder_p_tKcfC'

// LGTeacher.init(from:)
sil hidden @$s4main9LGTeacherC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGTeacher) -> (@owned LGTeacher, @error Error) {
// %0                                             // users: %30, %24, %16, %3
// %1                                             // users: %12, %8, %6, %5
bb0(%0 : $*Decoder, %1 : $LGTeacher):
  %2 = alloc_stack $LGTeacher, let, name "self"   // users: %23, %13, %6, %25, %31, %26
  debug_value_addr %0 : $*Decoder, let, name "decoder", argno 1 // id: %3
  debug_value undef : $Error, var, name "$error", argno 2 // id: %4
  strong_retain %1 : $LGTeacher                   // id: %5
  store %1 to %2 : $*LGTeacher                    // id: %6
  %7 = enum $Optional<String>, #Optional.none!enumelt // user: %10
  %8 = ref_element_addr %1 : $LGTeacher, #LGTeacher.subjectName // user: %9
  %9 = begin_access [modify] [dynamic] %8 : $*Optional<String> // users: %10, %11
  store %7 to %9 : $*Optional<String>             // id: %10
  end_access %9 : $*Optional<String>              // id: %11
  strong_release %1 : $LGTeacher                  // id: %12
  %13 = load %2 : $*LGTeacher                     // user: %14
  %14 = upcast %13 : $LGTeacher to $LGPerson      // user: %18
  %15 = alloc_stack $Decoder                      // users: %20, %18, %29, %16
  copy_addr %0 to [initialization] %15 : $*Decoder // id: %16
  // function_ref LGPerson.init(from:)
  %17 = function_ref @$s4main8LGPersonC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGPerson) -> (@owned LGPerson, @error Error) // user: %18
  try_apply %17(%15, %14) : $@convention(method) (@in Decoder, @owned LGPerson) -> (@owned LGPerson, @error Error), normal bb1, error bb2 // id: %18

// %19                                            // user: %21
bb1(%19 : $LGPerson):                             // Preds: bb0
  dealloc_stack %15 : $*Decoder                   // id: %20
  %21 = unchecked_ref_cast %19 : $LGPerson to $LGTeacher // users: %27, %23, %22
  strong_retain %21 : $LGTeacher                  // id: %22
  store %21 to %2 : $*LGTeacher                   // id: %23
  destroy_addr %0 : $*Decoder                     // id: %24
  destroy_addr %2 : $*LGTeacher                   // id: %25
  dealloc_stack %2 : $*LGTeacher                  // id: %26
  return %21 : $LGTeacher                         // id: %27

// %28                                            // user: %32
bb2(%28 : $Error):                                // Preds: bb0
  dealloc_stack %15 : $*Decoder                   // id: %29
  destroy_addr %0 : $*Decoder                     // id: %30
  dealloc_stack %2 : $*LGTeacher                  // id: %31
  throw %28 : $Error                              // id: %32
} // end sil function '$s4main9LGTeacherC4fromACs7Decoder_p_tKcfc'

// variable initialization expression of LGPartTimeTeacher.partTime
sil hidden [transparent] @$s4main17LGPartTimeTeacherC04partC0SdSgvpfi : $@convention(thin) () -> Optional<Double> {
bb0:
  %0 = enum $Optional<Double>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<Double>                   // id: %1
} // end sil function '$s4main17LGPartTimeTeacherC04partC0SdSgvpfi'

// LGPartTimeTeacher.partTime.getter
sil hidden [transparent] @$s4main17LGPartTimeTeacherC04partC0SdSgvg : $@convention(method) (@guaranteed LGPartTimeTeacher) -> Optional<Double> {
// %0                                             // users: %2, %1
bb0(%0 : $LGPartTimeTeacher):
  debug_value %0 : $LGPartTimeTeacher, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGPartTimeTeacher, #LGPartTimeTeacher.partTime // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<Double> // users: %4, %5
  %4 = load %3 : $*Optional<Double>               // user: %6
  end_access %3 : $*Optional<Double>              // id: %5
  return %4 : $Optional<Double>                   // id: %6
} // end sil function '$s4main17LGPartTimeTeacherC04partC0SdSgvg'

// LGPartTimeTeacher.partTime.setter
sil hidden [transparent] @$s4main17LGPartTimeTeacherC04partC0SdSgvs : $@convention(method) (Optional<Double>, @guaranteed LGPartTimeTeacher) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Optional<Double>, %1 : $LGPartTimeTeacher):
  debug_value %0 : $Optional<Double>, let, name "value", argno 1 // id: %2
  debug_value %1 : $LGPartTimeTeacher, let, name "self", argno 2 // id: %3
  %4 = ref_element_addr %1 : $LGPartTimeTeacher, #LGPartTimeTeacher.partTime // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Optional<Double> // users: %6, %7
  store %0 to %5 : $*Optional<Double>             // id: %6
  end_access %5 : $*Optional<Double>              // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s4main17LGPartTimeTeacherC04partC0SdSgvs'

// LGPartTimeTeacher.partTime.modify
sil hidden [transparent] @$s4main17LGPartTimeTeacherC04partC0SdSgvM : $@yield_once @convention(method) (@guaranteed LGPartTimeTeacher) -> @yields @inout Optional<Double> {
// %0                                             // users: %2, %1
bb0(%0 : $LGPartTimeTeacher):
  debug_value %0 : $LGPartTimeTeacher, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $LGPartTimeTeacher, #LGPartTimeTeacher.partTime // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Optional<Double> // users: %5, %8, %4
  yield %3 : $*Optional<Double>, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Optional<Double>              // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Optional<Double>              // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main17LGPartTimeTeacherC04partC0SdSgvM'

// LGPartTimeTeacher.deinit
sil hidden @$s4main17LGPartTimeTeacherCfd : $@convention(method) (@guaranteed LGPartTimeTeacher) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $LGPartTimeTeacher):
  debug_value %0 : $LGPartTimeTeacher, let, name "self", argno 1 // id: %1
  %2 = upcast %0 : $LGPartTimeTeacher to $LGPerson // user: %4
  // function_ref LGPerson.deinit
  %3 = function_ref @$s4main8LGPersonCfd : $@convention(method) (@guaranteed LGPerson) -> @owned Builtin.NativeObject // user: %4
  %4 = apply %3(%2) : $@convention(method) (@guaranteed LGPerson) -> @owned Builtin.NativeObject // users: %5, %6
  %5 = unchecked_ref_cast %4 : $Builtin.NativeObject to $LGPartTimeTeacher
  return %4 : $Builtin.NativeObject               // id: %6
} // end sil function '$s4main17LGPartTimeTeacherCfd'

// LGPartTimeTeacher.__deallocating_deinit
sil hidden @$s4main17LGPartTimeTeacherCfD : $@convention(method) (@owned LGPartTimeTeacher) -> () {
// %0                                             // users: %3, %1
bb0(%0 : $LGPartTimeTeacher):
  debug_value %0 : $LGPartTimeTeacher, let, name "self", argno 1 // id: %1
  // function_ref LGPartTimeTeacher.deinit
  %2 = function_ref @$s4main17LGPartTimeTeacherCfd : $@convention(method) (@guaranteed LGPartTimeTeacher) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed LGPartTimeTeacher) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $LGPartTimeTeacher // user: %5
  dealloc_ref %4 : $LGPartTimeTeacher             // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s4main17LGPartTimeTeacherCfD'

// LGPartTimeTeacher.__allocating_init()
sil hidden [exact_self_class] @$s4main17LGPartTimeTeacherCACycfC : $@convention(method) (@thick LGPartTimeTeacher.Type) -> @owned LGPartTimeTeacher {
bb0(%0 : $@thick LGPartTimeTeacher.Type):
  %1 = alloc_ref $LGPartTimeTeacher               // user: %3
  // function_ref LGPartTimeTeacher.init()
  %2 = function_ref @$s4main17LGPartTimeTeacherCACycfc : $@convention(method) (@owned LGPartTimeTeacher) -> @owned LGPartTimeTeacher // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned LGPartTimeTeacher) -> @owned LGPartTimeTeacher // user: %4
  return %3 : $LGPartTimeTeacher                  // id: %4
} // end sil function '$s4main17LGPartTimeTeacherCACycfC'

// LGPartTimeTeacher.init()
sil hidden @$s4main17LGPartTimeTeacherCACycfc : $@convention(method) (@owned LGPartTimeTeacher) -> @owned LGPartTimeTeacher {
// %0                                             // users: %9, %5, %3, %2
bb0(%0 : $LGPartTimeTeacher):
  %1 = alloc_stack $LGPartTimeTeacher, let, name "self" // users: %16, %10, %3, %17, %18
  strong_retain %0 : $LGPartTimeTeacher           // id: %2
  store %0 to %1 : $*LGPartTimeTeacher            // id: %3
  %4 = enum $Optional<Double>, #Optional.none!enumelt // user: %7
  %5 = ref_element_addr %0 : $LGPartTimeTeacher, #LGPartTimeTeacher.partTime // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<Double> // users: %7, %8
  store %4 to %6 : $*Optional<Double>             // id: %7
  end_access %6 : $*Optional<Double>              // id: %8
  strong_release %0 : $LGPartTimeTeacher          // id: %9
  %10 = load %1 : $*LGPartTimeTeacher             // user: %11
  %11 = upcast %10 : $LGPartTimeTeacher to $LGPerson // user: %13
  // function_ref LGPerson.init()
  %12 = function_ref @$s4main8LGPersonCACycfc : $@convention(method) (@owned LGPerson) -> @owned LGPerson // user: %13
  %13 = apply %12(%11) : $@convention(method) (@owned LGPerson) -> @owned LGPerson // user: %14
  %14 = unchecked_ref_cast %13 : $LGPerson to $LGPartTimeTeacher // users: %19, %16, %15
  strong_retain %14 : $LGPartTimeTeacher          // id: %15
  store %14 to %1 : $*LGPartTimeTeacher           // id: %16
  destroy_addr %1 : $*LGPartTimeTeacher           // id: %17
  dealloc_stack %1 : $*LGPartTimeTeacher          // id: %18
  return %14 : $LGPartTimeTeacher                 // id: %19
} // end sil function '$s4main17LGPartTimeTeacherCACycfc'

// LGPartTimeTeacher.__allocating_init(from:)
sil hidden [exact_self_class] @$s4main17LGPartTimeTeacherC4fromACs7Decoder_p_tKcfC : $@convention(method) (@in Decoder, @thick LGPartTimeTeacher.Type) -> (@owned LGPartTimeTeacher, @error Error) {
// %0                                             // user: %4
bb0(%0 : $*Decoder, %1 : $@thick LGPartTimeTeacher.Type):
  %2 = alloc_ref $LGPartTimeTeacher               // user: %4
  // function_ref LGPartTimeTeacher.init(from:)
  %3 = function_ref @$s4main17LGPartTimeTeacherC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGPartTimeTeacher) -> (@owned LGPartTimeTeacher, @error Error) // user: %4
  try_apply %3(%0, %2) : $@convention(method) (@in Decoder, @owned LGPartTimeTeacher) -> (@owned LGPartTimeTeacher, @error Error), normal bb1, error bb2 // id: %4

// %5                                             // user: %6
bb1(%5 : $LGPartTimeTeacher):                     // Preds: bb0
  return %5 : $LGPartTimeTeacher                  // id: %6

// %7                                             // user: %8
bb2(%7 : $Error):                                 // Preds: bb0
  throw %7 : $Error                               // id: %8
} // end sil function '$s4main17LGPartTimeTeacherC4fromACs7Decoder_p_tKcfC'

// LGPartTimeTeacher.init(from:)
sil hidden @$s4main17LGPartTimeTeacherC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGPartTimeTeacher) -> (@owned LGPartTimeTeacher, @error Error) {
// %0                                             // users: %30, %24, %16, %3
// %1                                             // users: %12, %8, %6, %5
bb0(%0 : $*Decoder, %1 : $LGPartTimeTeacher):
  %2 = alloc_stack $LGPartTimeTeacher, let, name "self" // users: %23, %13, %6, %25, %31, %26
  debug_value_addr %0 : $*Decoder, let, name "decoder", argno 1 // id: %3
  debug_value undef : $Error, var, name "$error", argno 2 // id: %4
  strong_retain %1 : $LGPartTimeTeacher           // id: %5
  store %1 to %2 : $*LGPartTimeTeacher            // id: %6
  %7 = enum $Optional<Double>, #Optional.none!enumelt // user: %10
  %8 = ref_element_addr %1 : $LGPartTimeTeacher, #LGPartTimeTeacher.partTime // user: %9
  %9 = begin_access [modify] [dynamic] %8 : $*Optional<Double> // users: %10, %11
  store %7 to %9 : $*Optional<Double>             // id: %10
  end_access %9 : $*Optional<Double>              // id: %11
  strong_release %1 : $LGPartTimeTeacher          // id: %12
  %13 = load %2 : $*LGPartTimeTeacher             // user: %14
  %14 = upcast %13 : $LGPartTimeTeacher to $LGPerson // user: %18
  %15 = alloc_stack $Decoder                      // users: %20, %18, %29, %16
  copy_addr %0 to [initialization] %15 : $*Decoder // id: %16
  // function_ref LGPerson.init(from:)
  %17 = function_ref @$s4main8LGPersonC4fromACs7Decoder_p_tKcfc : $@convention(method) (@in Decoder, @owned LGPerson) -> (@owned LGPerson, @error Error) // user: %18
  try_apply %17(%15, %14) : $@convention(method) (@in Decoder, @owned LGPerson) -> (@owned LGPerson, @error Error), normal bb1, error bb2 // id: %18

// %19                                            // user: %21
bb1(%19 : $LGPerson):                             // Preds: bb0
  dealloc_stack %15 : $*Decoder                   // id: %20
  %21 = unchecked_ref_cast %19 : $LGPerson to $LGPartTimeTeacher // users: %27, %23, %22
  strong_retain %21 : $LGPartTimeTeacher          // id: %22
  store %21 to %2 : $*LGPartTimeTeacher           // id: %23
  destroy_addr %0 : $*Decoder                     // id: %24
  destroy_addr %2 : $*LGPartTimeTeacher           // id: %25
  dealloc_stack %2 : $*LGPartTimeTeacher          // id: %26
  return %21 : $LGPartTimeTeacher                 // id: %27

// %28                                            // user: %32
bb2(%28 : $Error):                                // Preds: bb0
  dealloc_stack %15 : $*Decoder                   // id: %29
  destroy_addr %0 : $*Decoder                     // id: %30
  dealloc_stack %2 : $*LGPartTimeTeacher          // id: %31
  throw %28 : $Error                              // id: %32
} // end sil function '$s4main17LGPartTimeTeacherC4fromACs7Decoder_p_tKcfc'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// JSONEncoder.__allocating_init()
sil [serialized] @$s10Foundation11JSONEncoderCACycfC : $@convention(method) (@thick JSONEncoder.Type) -> @owned JSONEncoder

// static Int.== infix(_:_:)
sil public_external [transparent] [serialized] @$sSi2eeoiySbSi_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // user: %5
  %4 = struct_extract %1 : $Int, #Int._value      // user: %5
  %5 = builtin "cmp_eq_Int64"(%3 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %6
  %6 = struct $Bool (%5 : $Builtin.Int1)          // user: %7
  return %6 : $Bool                               // id: %7
} // end sil function '$sSi2eeoiySbSi_SitFZ'

// _hashValue<A>(for:)
sil [serialized] [always_inline] @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int

// Hasher.combine<A>(_:)
sil [serialized] [always_inline] @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()

// ~= infix<A>(_:_:)
sil public_external [transparent] [serialized] @$ss2teoiySbx_xtSQRzlF : $@convention(thin) <T where T : Equatable> (@in_guaranteed T, @in_guaranteed T) -> Bool {
// %0                                             // user: %4
// %1                                             // user: %4
bb0(%0 : $*T, %1 : $*T):
  %2 = metatype $@thick T.Type                    // user: %4
  %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
  %4 = apply %3<T>(%0, %1, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
  return %4 : $Bool                               // id: %5
} // end sil function '$ss2teoiySbx_xtSQRzlF'

// protocol witness for static Equatable.== infix(_:_:) in conformance String
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSSSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed String, @in_guaranteed String, @thick String.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*String, %1 : $*String, %2 : $@thick String.Type):
  %3 = load %0 : $*String                         // user: %7
  %4 = load %1 : $*String                         // user: %7
  %5 = metatype $@thin String.Type                // user: %7
  // function_ref static String.== infix(_:_:)
  %6 = function_ref @$sSS2eeoiySbSS_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$sSSSQsSQ2eeoiySbx_xtFZTW'

// static String.== infix(_:_:)
sil [serialized] [always_inline] [readonly] [_semantics "string.equals"] @$sSS2eeoiySbSS_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool

sil_vtable LGPerson {
  #LGPerson.name!getter.1: (LGPerson) -> () -> String? : @$s4main8LGPersonC4nameSSSgvg	// LGPerson.name.getter
  #LGPerson.name!setter.1: (LGPerson) -> (String?) -> () : @$s4main8LGPersonC4nameSSSgvs	// LGPerson.name.setter
  #LGPerson.name!modify.1: (LGPerson) -> () -> () : @$s4main8LGPersonC4nameSSSgvM	// LGPerson.name.modify
  #LGPerson.age!getter.1: (LGPerson) -> () -> Int? : @$s4main8LGPersonC3ageSiSgvg	// LGPerson.age.getter
  #LGPerson.age!setter.1: (LGPerson) -> (Int?) -> () : @$s4main8LGPersonC3ageSiSgvs	// LGPerson.age.setter
  #LGPerson.age!modify.1: (LGPerson) -> () -> () : @$s4main8LGPersonC3ageSiSgvM	// LGPerson.age.modify
  #LGPerson.init!allocator.1: (LGPerson.Type) -> () -> LGPerson : @$s4main8LGPersonCACycfC	// LGPerson.__allocating_init()
  #LGPerson.init!allocator.1: (LGPerson.Type) -> (Decoder) throws -> LGPerson : @$s4main8LGPersonC4fromACs7Decoder_p_tKcfC	// LGPerson.__allocating_init(from:)
  #LGPerson.encode!1: (LGPerson) -> (Encoder) throws -> () : @$s4main8LGPersonC6encode2toys7Encoder_p_tKF	// LGPerson.encode(to:)
  #LGPerson.deinit!deallocator.1: @$s4main8LGPersonCfD	// LGPerson.__deallocating_deinit
}

sil_vtable LGTeacher {
  #LGPerson.name!getter.1: (LGPerson) -> () -> String? : @$s4main8LGPersonC4nameSSSgvg [inherited]	// LGPerson.name.getter
  #LGPerson.name!setter.1: (LGPerson) -> (String?) -> () : @$s4main8LGPersonC4nameSSSgvs [inherited]	// LGPerson.name.setter
  #LGPerson.name!modify.1: (LGPerson) -> () -> () : @$s4main8LGPersonC4nameSSSgvM [inherited]	// LGPerson.name.modify
  #LGPerson.age!getter.1: (LGPerson) -> () -> Int? : @$s4main8LGPersonC3ageSiSgvg [inherited]	// LGPerson.age.getter
  #LGPerson.age!setter.1: (LGPerson) -> (Int?) -> () : @$s4main8LGPersonC3ageSiSgvs [inherited]	// LGPerson.age.setter
  #LGPerson.age!modify.1: (LGPerson) -> () -> () : @$s4main8LGPersonC3ageSiSgvM [inherited]	// LGPerson.age.modify
  #LGPerson.init!allocator.1: (LGPerson.Type) -> () -> LGPerson : @$s4main9LGTeacherCACycfC [override]	// LGTeacher.__allocating_init()
  #LGPerson.init!allocator.1: (LGPerson.Type) -> (Decoder) throws -> LGPerson : @$s4main9LGTeacherC4fromACs7Decoder_p_tKcfC [override]	// LGTeacher.__allocating_init(from:)
  #LGPerson.encode!1: (LGPerson) -> (Encoder) throws -> () : @$s4main8LGPersonC6encode2toys7Encoder_p_tKF [inherited]	// LGPerson.encode(to:)
  #LGTeacher.subjectName!getter.1: (LGTeacher) -> () -> String? : @$s4main9LGTeacherC11subjectNameSSSgvg	// LGTeacher.subjectName.getter
  #LGTeacher.subjectName!setter.1: (LGTeacher) -> (String?) -> () : @$s4main9LGTeacherC11subjectNameSSSgvs	// LGTeacher.subjectName.setter
  #LGTeacher.subjectName!modify.1: (LGTeacher) -> () -> () : @$s4main9LGTeacherC11subjectNameSSSgvM	// LGTeacher.subjectName.modify
  #LGTeacher.deinit!deallocator.1: @$s4main9LGTeacherCfD	// LGTeacher.__deallocating_deinit
  #LGTeacher!ivardestroyer.1: @$s4main9LGTeacherCfE	// LGTeacher.__ivar_destroyer
}

sil_vtable LGPartTimeTeacher {
  #LGPerson.name!getter.1: (LGPerson) -> () -> String? : @$s4main8LGPersonC4nameSSSgvg [inherited]	// LGPerson.name.getter
  #LGPerson.name!setter.1: (LGPerson) -> (String?) -> () : @$s4main8LGPersonC4nameSSSgvs [inherited]	// LGPerson.name.setter
  #LGPerson.name!modify.1: (LGPerson) -> () -> () : @$s4main8LGPersonC4nameSSSgvM [inherited]	// LGPerson.name.modify
  #LGPerson.age!getter.1: (LGPerson) -> () -> Int? : @$s4main8LGPersonC3ageSiSgvg [inherited]	// LGPerson.age.getter
  #LGPerson.age!setter.1: (LGPerson) -> (Int?) -> () : @$s4main8LGPersonC3ageSiSgvs [inherited]	// LGPerson.age.setter
  #LGPerson.age!modify.1: (LGPerson) -> () -> () : @$s4main8LGPersonC3ageSiSgvM [inherited]	// LGPerson.age.modify
  #LGPerson.init!allocator.1: (LGPerson.Type) -> () -> LGPerson : @$s4main17LGPartTimeTeacherCACycfC [override]	// LGPartTimeTeacher.__allocating_init()
  #LGPerson.init!allocator.1: (LGPerson.Type) -> (Decoder) throws -> LGPerson : @$s4main17LGPartTimeTeacherC4fromACs7Decoder_p_tKcfC [override]	// LGPartTimeTeacher.__allocating_init(from:)
  #LGPerson.encode!1: (LGPerson) -> (Encoder) throws -> () : @$s4main8LGPersonC6encode2toys7Encoder_p_tKF [inherited]	// LGPerson.encode(to:)
  #LGPartTimeTeacher.partTime!getter.1: (LGPartTimeTeacher) -> () -> Double? : @$s4main17LGPartTimeTeacherC04partC0SdSgvg	// LGPartTimeTeacher.partTime.getter
  #LGPartTimeTeacher.partTime!setter.1: (LGPartTimeTeacher) -> (Double?) -> () : @$s4main17LGPartTimeTeacherC04partC0SdSgvs	// LGPartTimeTeacher.partTime.setter
  #LGPartTimeTeacher.partTime!modify.1: (LGPartTimeTeacher) -> () -> () : @$s4main17LGPartTimeTeacherC04partC0SdSgvM	// LGPartTimeTeacher.partTime.modify
  #LGPartTimeTeacher.deinit!deallocator.1: @$s4main17LGPartTimeTeacherCfD	// LGPartTimeTeacher.__deallocating_deinit
}

sil_witness_table private LGPerson.CodingKeys: Equatable module main {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance LGPerson.CodingKeys
}

sil_witness_table private LGPerson.CodingKeys: Hashable module main {
  base_protocol Equatable: LGPerson.CodingKeys: Equatable module main
  method #Hashable.hashValue!getter.1: <Self where Self : Hashable> (Self) -> () -> Int : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH9hashValueSivgTW	// protocol witness for Hashable.hashValue.getter in conformance LGPerson.CodingKeys
  method #Hashable.hash!1: <Self where Self : Hashable> (Self) -> (inout Hasher) -> () : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH4hash4intoys6HasherVz_tFTW	// protocol witness for Hashable.hash(into:) in conformance LGPerson.CodingKeys
  method #Hashable._rawHashValue!1: <Self where Self : Hashable> (Self) -> (Int) -> Int : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOSHAASH13_rawHashValue4seedS2i_tFTW	// protocol witness for Hashable._rawHashValue(seed:) in conformance LGPerson.CodingKeys
}

sil_witness_table private LGPerson.CodingKeys: CodingKey module main {
  base_protocol CustomDebugStringConvertible: LGPerson.CodingKeys: CustomDebugStringConvertible module main
  base_protocol CustomStringConvertible: LGPerson.CodingKeys: CustomStringConvertible module main
  method #CodingKey.stringValue!getter.1: <Self where Self : CodingKey> (Self) -> () -> String : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP11stringValueSSvgTW	// protocol witness for CodingKey.stringValue.getter in conformance LGPerson.CodingKeys
  method #CodingKey.init!allocator.1: <Self where Self : CodingKey> (Self.Type) -> (String) -> Self? : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP11stringValuexSgSS_tcfCTW	// protocol witness for CodingKey.init(stringValue:) in conformance LGPerson.CodingKeys
  method #CodingKey.intValue!getter.1: <Self where Self : CodingKey> (Self) -> () -> Int? : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP8intValueSiSgvgTW	// protocol witness for CodingKey.intValue.getter in conformance LGPerson.CodingKeys
  method #CodingKey.init!allocator.1: <Self where Self : CodingKey> (Self.Type) -> (Int) -> Self? : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs0C3KeyAAsAGP8intValuexSgSi_tcfCTW	// protocol witness for CodingKey.init(intValue:) in conformance LGPerson.CodingKeys
}

sil_witness_table private LGPerson.CodingKeys: CustomDebugStringConvertible module main {
  method #CustomDebugStringConvertible.debugDescription!getter.1: <Self where Self : CustomDebugStringConvertible> (Self) -> () -> String : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs28CustomDebugStringConvertibleAAsAGP16debugDescriptionSSvgTW	// protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LGPerson.CodingKeys
}

sil_witness_table private LGPerson.CodingKeys: CustomStringConvertible module main {
  method #CustomStringConvertible.description!getter.1: <Self where Self : CustomStringConvertible> (Self) -> () -> String : @$s4main8LGPersonC10CodingKeys029_12232F587A4C5CD8B1EEDF696793F2FCLLOs23CustomStringConvertibleAAsAGP11descriptionSSvgTW	// protocol witness for CustomStringConvertible.description.getter in conformance LGPerson.CodingKeys
}

sil_witness_table hidden LGPerson: Decodable module main {
  method #Decodable.init!allocator.1: <Self where Self : Decodable> (Self.Type) -> (Decoder) throws -> Self : @$s4main8LGPersonCSeAASe4fromxs7Decoder_p_tKcfCTW	// protocol witness for Decodable.init(from:) in conformance LGPerson
}

sil_witness_table hidden LGPerson: Encodable module main {
  method #Encodable.encode!1: <Self where Self : Encodable> (Self) -> (Encoder) throws -> () : @$s4main8LGPersonCSEAASE6encode2toys7Encoder_p_tKFTW	// protocol witness for Encodable.encode(to:) in conformance LGPerson
}

sil_witness_table public_external [serialized] String: Equatable module Swift {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$sSSSQsSQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance String
}



